1. git特性	Git 是一个免费的、开源的分布式版本控制系统，可以快速高效地处理从小型到大型的各种项目。
	git具有版本控制的特性，版本控制是一种记录文件内容变化，用来查看历史版本，方便版本切换
	通过git过渡到团队协作

	集中式版本控制与分布式区别：
		集中管理服务器，
		每个客户端都具有完整的版本，可以断网开发

	git工作机制，git add,git commit , 临时存储和历史版本

	代码托管中心：GitLab（局域网），互联网GitHub,Gitee

2. git安装和基础配置
	安装：
		MAC -> HOMEBREW安装：brew install git
		LINUX -> YUM安装： yum -y install git
		git --version
	配置：
	    1. 设置用户签名：
		git config --global user.name daikaix
		git config --global user.email 996327890@qq.com
		注意：
			Git 首次安装必须设置一下用户签名，否则无法提交代码
			信息存放在~/.gitconfig
			此处设置用户签名和将来登录 GitHub（或其他代码托管中心）的账号没有任何关系

	    2. 初始化本地库
		cd /xx/xx  ( 此处为你代码的存放位置 )
		git init -> 生成了.git目录

		3. 查看本地库状态
		git status ( 分支，提交记录，和待提交的信息 )

		4. 添加,删除缓存区
		git add filename -> ( 有点类似于IDEA的默认add，自动变绿 )
		git rm --cached filename -> ( 有点类似于IDEA回退，导致文件变红，无法追踪 )
		添加后的git status: Changes to be committed
		删除后的git status: Untracked files

		5. 提交本地库
		git commit -m "log message" filename -> ( 有点类似于 IDEA 的commit提交，在下面写提交的简要概述 )
			不填表示全部提交

		6. 查看提交记录
		git reflog  查看简短日志
			b0006bc (HEAD -> master) HEAD@{0}: commit (initial): first commit
		git log  查看详细日志，包括用户名，邮箱，很长的版本号

            git log --pretty=oneline,只显示版本号和提交的备注信息

3. 版本穿梭
    git reset --hard 版本号  ( 类似于IDEA的 Reset Current Branch to Here )
        还有mixed,softed 分别表示强制关闭，文件不更改，改变也不撤销

    本质：
        每次提交都会有一个版本，会有一个master指针，会指向最新的版本
        穿越回去，只需要调整指针的位置即可

4. 分支
    在版本控制过程中，同时推进多个任务，为每个任务单独创建一个分支，不影响其他人的使用
    hot-fix
    master          o -> o -> o
    feature-blue    o ->

    指令：
        git branch -v	        查看分支
        git branch 分支名        创建分支(在当前分支的基础上)
        git checkout 分支名      切换分支
        git merge 分支名	        把指定的分支合并到当前分支上
        git branch -d 分支名	    删除分支

    本质：
        多个不同的指针，指针对应的文件在git branch, 即当前分支上获取
        可以进行合并，一定要多个任务同时进行，才需要通过git merge合并

    正常合并：
        git merge 分支名，合并的分支不会消失，只是修改会被添加到主分支上
    冲突合并：
        合并分支时，发现合并时两个分支修改了同一个部分的代码，需要人为进行修改
        实例：
			master分支修改了file的一行，git add,commit
			lsf分支修改了file的同一行，git add commit
			git checkout master
			git merge lsf -> 此时会出现分支的合并冲突异常
				Automatic merge failed; fix conflicts and then commit the result.
				git status ( you have unmerged paths )
				cat file -> 看到不同之处

		解决冲突操作：
			直接vim修改file文件，将特殊字符都删除，保存
			git add file -> git commit ( 把file提交上去，不能带文件名 )

5. 	远程代码库
	团队内协作：内部通过pull,clone,push完成代码更新
	跨团队协作：其他团队的远程库，本团队进行fork获取其远程库，clone到本地库，push进行更改
			  开发完毕后，通过pull request发送给其他团队，其他团队审核后，进行merge即可

	GitHub创建仓库：
		1. 创建远程库  new repository
		2. 写远程库的名称，需要与本地库保持一致，选择public和private库
		3. 两种链接，SSH链接和HTTP链接

	创建远程仓库别名：
		在主分支相同文件夹下进行操作：
		git remote -v					查看当前所有远程地址别名
		git remote add 别名 远程地址		起别名(远程地址可以是HTTP后者SSH)
			git remote add hellogit https://github.com/abc/HelloGit.git
			会出现两个别名，fetch和push都以使用

	推送本地库到远程库：
		git push 远程库地址或其别名 分支名	推送到远程库
			git push hellogit master

	拉取远程库：
		git pull 远程库地址或其别名 分支名
			将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并
			相当于git fetch + git merge，这样可能会产生冲突，需要手动解决

	克隆远程库：
		git clone 远程库地址		从远程库克隆到本地(SSH,HTTP)
			进入克隆的项目，使用git remote -v 查看别名，自动起名为origin

    配置SSH免密登录：
        生成公钥，私钥对：ssh-keygen -t rsa -C 邮箱, -C表示注释信息
        选择秘钥的生成位置，默认为~/.ssh/id_rsa
        将公钥放置在GitHub中即可

    总体的思路：
        1. 安装git, 配置git config, 设置用户名，邮箱
        2. 配置git ignore
        3. 配置git SSH免密登录
        4. 创建一个code文件夹，使用git init初始化
        5. 在github创建一个repository
        6. 在code中使用git clone克隆该repository
        7. 使用git remote -v 查看，默认是origin别名，可以设置自己的名称
        8. 用IDEA打开该目录,使用IDEA提供的git add,git rm,git commit
           git checkout,git branch
           (IDEA也可以自己创建仓库，push,pull,clone)
        9. git push,git pull 推送远程

    6. 团队协作
        settings,Manager access,Invite a collaborator
        填入合作者，将网页链接发送给合作者，合作者接受后，在自己的仓库中可以看到对应的仓库

        跨团队协作：
            在网页端进行fork
                git add,git commit
            在网页端Pull requests,
                new pull requests,create requests
            此时别的团队会在git requests中收到信息
            里面还可以进行即时会话交流

    7. IDEA使用git
        配置Git忽略文件
            1. 放置在家目录下,生成.gitignore文件
                # Compiled class file
                *.class

                # Log file
                *.log

                # BlueJ files
                *.ctxt

                # Mobile Tools for Java (J2ME)
                .mtj.tmp/

                # Package Files #
                *.jar
                *.war
                *.nar
                *.ear
                *.zip
                *.tar.gz
                *.rar

                # virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
                hs_err_pid*
                .classpath
                .project
                .settings
                target
                .idea
                *.iml
            2. 在.gitconfig 文件中引用忽略配置文件
                [core]
                    excludesfile = /Users/daikaixuan/.gitignore

        IDEA配置Git程序
            preferences -> Git -> Git Path


