1. 软件安装 [ Windows中，.exe文件，安装到ProgramFiles文件夹中 ]
    1. CentOS中类似的程序被称为软件包,Package， 软件中所有文件的压缩包，包含所有的指令。
        .rpm文件， Red Hat Package Manager, 红帽软件包管理器
        Debian一族， 以.deb 为后缀

    2. 不同之处：软件包还处理依赖关系，不需要搜索来进行下载，几乎所有的rpm软件包被存放在相同位置，软件仓库repository
        2.1 依赖， Eclipse -> Java环境
        2.2 repository, 软件开源的，集中存放到一个地方
            [ ftp.linux.com, mirrors.ftp.com, mirros.aliyun.com ]

    3. 切换软件仓库
        仓库列表记录在 /etc/yum.repos.d/CentOS-Base.repo  [ base,updates 等等 ]
        CentOS 官方的源列表（包含各个国家和地区的源。比如国内有 阿里、网易、华为、清华大学，等等的镜像网站）：https://www.centos.org/download/mirrors
        1. 备份原文件 mv 重命名
        2. 获取阿里文件 wget -O /etc/xxx  http://mirrors
        3. yum makecache

    4. 终端管理软件包
        yum命令
        yum update/upgrade 更新软件包
        yum search
        yum install xx
        rpm软件包：官网下载rpm包
        rpm -i *.rpm
        rpm -e 包名
        yum localinstall *.rpm
        yum remove 包名

2. RTFM 阅读手册
    RTFM：read the fuck manual
    man命令：显示使用手册
    sudo yum install -y man-pages 下载man手册
    sudo mandb 更新man手册

    man+数字+命令/函数
    man 3 rand
    手册移动：Home,End  /搜索  PageUp,PageDown
        Name,
        Synopsis:用法，
            粗体要原封不动的输入，下面划线的需要进行替换
            ...表示可以前面划线部分可以输入多个
            [-hvc] 表示可选的
            [a|b] ab不可同时选
            [expression] 即为后面的Primaries的内容
            一定要按照顺序书写命令

        Description描述：
            -pv描述SYNOPSIS中的选项参数的含义

        Primaries:
            可选表达式，如 -name "xxx"

    apropos: 根据关键字查找命令
        apropos sound

    -h --help参数：获取帮助文档
        易于阅读

    whatis man: man手册的简易版本

3. 查找文件 [ man find ]

    locate renamed_file
        文件的数据库中进行查找，新创建的文件没有保存在数据库中，所以不能找到最新的文件
        sudo updatedb  更新文件数据库

    find 查找当前的实际文件
        不会在文件数据库中查找，遍历实际硬盘。
        find [-H | -L | -P] [-EXdsx] [-f path] path ... [expression]
        find [-H | -L | -P] [-EXdsx] -f path [path ...] [expression]

    根据文件名查找：find -name "new_file"
    指定查找范围： find /var/temp -name "new_file"
    根据文件大小查找：find /var -size +10M
    根据最近时间查找：find /var -atime -7
    只查找目录或文件：find /var -type d[目录] f[文件]
                   find . -name "new_file" -type d

    对查找的结果进行操作：
        打印结果： find . -name "*.txt" -printf "%p - %u /n"
        %p 是文件名，%u 是用户名
    后接一个命令：
        find one -name "*.txt" -exec chmod 600 {} \;
        {} 表示对所有查找到的文件进行替换  \表示结束
        -ok也可以，但是会询问是否执行

4. 数据处理
    grep: 筛选数据 Globally search a Regular Expression and Print
        grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]] [-e pattern] [-f file] [--binary-files=value] [--color[=when]]
                  [--colour[=when]] [--context[=num]] [--label] [--line-buffered] [--null] [pattern] [file ...]
        基础搜索：grep path /etc/profile [ pattern,file ]
            pattern: "Hello World" 有空格
        忽略大小写：grep -i path /etc/profile
        显示行号：grep -n path /etc/profile
        只显示文本不在的行：grep -v path /etc/profile [颠倒]
        递归查找： grep -r "Hello World" folder/

        使用正则表达式： . ^ $ [] ? * + | ()
            -E参数：grep -E ^Path /etc/profile
                   grep -E [Pp0-4a-zA-Z]ath /etc/profile

    sort: 文件排序
        sort new_file 不区分大小写
        -o 参数，将排序后的结果写入新文件, sort -o new_file1 new_file
        -r 倒序排列
        -R 随机排序
        -n 对数字排序 [ 默认是按照字符串来进行排序 ]

    wc: 文件的统计 统计行数，字节数，字符数
        wc name.txt
        8       8      35 number.txt
        行数    单词数  字节数（包含换行符）

        只统计行数：wc -l name.txt
        只统计单词数：wc -w name.txt
        只统计字节数：wc -c name.txt
        只统计字符数：wc -m name.txt

    uniq: 删除文件中的重复内容,将连续的重复行变成一行[不连续的不行]
        uniq repeat.txt unique.txt

        -c 参数：统计重复的行数 uniq -c repeat.txt
        -d ：只显示重复的行

    cut:
        根据字符数剪切 cut -c 2-4 name.txt  [ 每行只保留第二个到第四个字符的命令 ]
        -d 指定是用什么分隔符
        -f 剪切分隔符分隔的那一块，或那几块区域

    CSV: 逗号分隔值文件，以逗号分隔的文件
        1. nano notes.csv, 填入数据
            Mark,95 / 100,很不错
            ...
        2. cat notes.csv
        3. cut -d , -f 1 notes.csv > student.txt





5. 输出重定向
    概念：将本来要显示在终端的命令结果输送到别的地方，[ 输送到文件中，或者作为其他命令的输入 ]
    管道 pipeline：
        将两个命令连起来，一个命令的输出作为另一个命令的输入
    流 stream:
        每个时间点传输一个，而不是打包一起传输

    重定向流符号：
        > : 输出结果重定向到指定文件
            文件不存在，则新建一个文件，如果文件存在，把文件内容覆盖掉，不征求用户的确认

            /dev/null 文件黑洞
        >> :输出结果重定向到指定文件
            文件不存在，则新建一个文件，如果文件存在，把内容追加到文件末尾h

        2> :将错误输出重定向
        2>> : 错误输出重定向到文件末尾
            cat not_exist_file.csv > result.txt 2> errors.log

        2>&1 : 将标准输出和错误输出到同一个文件 [ 追加 ]
            cat not_exist_file.csv > result.txt 2>&1
            cat not_exist_file.csv >> result.txt 2>&1

    输入输出：
        标准输入：stdin   文件描述符：0
        标准输出：stdout (命令正确执行)  1
        标准错误输出：stderr (命令错误执行)  2
    文件描述符：
        File Descriptor, 表述指向文件的引用的抽象概念
        非负整数，索引值，指向操作系统内核为每一个进程维护的该进程打开文件的记录表

6. 输入重定向以及管道
    <: 从文件读取输入
    <<: 从键盘输入

        cat < notes.csv
        sort -n << END  终端进入键盘模式,输入123，12，1，345，END,输出排序结果

        wc -m << END > numbers_sorted.txt 2>&1

    管道：|
    作用是建立命令管道，将命令1的输出作为命令2的输入
    按学生姓名排序：
        cut -d , -f 1 notes.csv | sort > sorted_name.txt
    du命令改造：
        du | sort -nr | head
    包含log的文件名
        sudo grep log -Ir /var/log | cut -d : -f 1 | sort | uniq
        -I排除二进制


监控系统活动，查看进程
    Linux是多任务多用的操作系统，管理多个同时运行的程序，多任务多用户的隐患
    w 命令：
        有哪些用户登录，在干什么
         7:37  up 15 days, 23:20, 2 users, load averages: 2.80 1.96 1.83
        USER     TTY      FROM              LOGIN@  IDLE WHAT
        daikaixuan console  -                14 721  15days -
        daikaixuan s000     -                四16       - w
        时间 系统运行时间 load average:1min的平均负载，5min的平均负载，15min的平均负载（CPU运行的比率）
        登录用户的列表：USER用户名， TTY终端名称 :0表示本地，图形界面终端  pts/0 伪终端从属
        FROM: IP地址   LOGIN@：用户的登陆时间  IDLE:不活跃的时间  JCPU:使用的CPU处理时间
        PCPU:执行当前进程消耗的时间  WHAT,当下用户正在使用的程序
    date：当前时间
    uptime：显示运行时间
    tload: 绘制随时间变化的负载曲线图

    ps：列出运行的进程 【 chrome, Apache 】
    ps：Process Status, 进程状态,是进程的快照，是不变的
          PID TTY           TIME CMD
        57101 ttys000    0:06.71 -zsh
        57794 ttys001    0:00.26 /bin/zsh --login -i
        PID进程号,TTY是终端对应的，运行时间，cmd程序

        列出所有进程： ps -ef | less
        UID   PID  PPID   C STIME   TTY           TIME CMD
        0     1     0   0 14 721  ??        18:55.60 /sbin/launchd
        0    56     1   0 14 721  ??         1:20.71 /usr/sbin/syslogd
        0    57     1   0 14 721  ??         0:43.09 /usr/libexec/UserEventAgent (System)
        PPID 父进程

        以乔木状列出进程：ps -efH
        列出用户的进程： ps -u oscar
        通过CPU和内存来过滤进程：
            ps -aux --sort -pcpu| less 根据CPU使用率降序排列
            ps -aux --sort -pmem| less 根据内存使用率降序排列
            ps -aux --sort -pcpu,+pmem| head 根据内存和CPU使用率降序排列

        树形结构显示线程：pstree ps -axjf

