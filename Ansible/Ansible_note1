1. 简介
    IAAS: 仅有一台机器，自己安装操作系统
    PAAS: 硬件，操作系统安装完毕
    SAAS: 软件机操作
    应用场景分析
        在企业开发的过程中，由开发工程师开发软件，测试工程师测试，然后打包部署到服务器上
        为了加快部署的速度，同时完成多台机器的部署，需要使用自动化部署工具。
    常见的自动化运维工具：
        Saltstack，Saltstack一般需部署agent
        Puppet等，Puppet虽然功能强大，但是配置复杂，重型，适合大型环境
        Ansible，作为轻量级的自动化部署工具。

2. 特性 无需安装特定软件，基于OpenSSH
    1. 模块化：调用模块完成特定的任务
    2. 基于Python语言实现，部署简单，不需要安装客户端，无需代理不依赖PKI。
    3. 安全，基于OpenSSH。
    4. 部署简单，基于python和SSH(默认已安装)，agentless
    5. 支持playbook编排任务，以及多层可复用的解决方案role
    6. 幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况
    7. 可使用任何编程语言写模块
    缺点：
        只能应对几百台主机的情况，对于大型环境一般使用专门的Saltstack

3. Ansible的架构
    首先需要添加主机清单
    通过Modules 执行命令
    通过PlayBook自动化执行

    Ansible由INVENTORY、API、MODULES、PLUGINS所组成，是ansible核心执行工具。
        INVENTORY：ansible管理主机的清单/etc/ansible/hosts
        MODULES：命令的执行模块，多数为内置核心模块
        PLUGINS：模块功能的补充
        API：第三方程序调用的编程接口

    ansible实现管理的主要方式：
        Ad-Hoc：直接使用ansible命令，用于临时命令使用场景。
        Ansible-playbook：长期规划好的，大型项目的场景。

    Ansible-playbook（剧本）执行过程
        将已有编排好的任务集写入Ansible-Playbook
        通过ansible-playbook命令分拆任务集至逐条ansible命令，按预定规则逐条执行

    Ansible主要操作对象
       HOSTS主机
       NETWORKING网络设备

4. 安装Ansible
    1. 安装配置1台服务机，3台客户机
        重复创建四台机器：
            下载centos_mini, 创建虚拟机，配置存储盘片，语言，磁盘分区，begin install
            root admin
        为4台机器配置不同的静态的IP地址，且可以访问外网
            onBOOT=yes, systemctl restart network
            修改虚拟机网络连接方式为桥接方式 ip addr -> ip地址
            通过终端连接虚拟机
        配置机器yum源：
            cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup
            curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo
            yum clean all # 清除系统所有的yum缓存
            yum makecache # 生成yum缓存
            安装vim,net-tools,nmtui
        nmtui配置静态IP:
            手动模式，IP地址 192.168.1.8/24
                          192.168.1.7/24
                          192.168.1.11/24
                    Server: 192.168.1.9/24  Dai ~/.ssh/config

            以及GateWay和DNS Server

    2. Server机安装Ansible
        配置epel国内源：
            yum install epel-release  EPEL源，额外的软件包
            wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo    # 下载阿里开源镜像的epel源文件
            yum clean all # 清除系统所有的yum缓存
            yum makecache # 生成yum缓存
        安装ansible:
            yum install ansible
        确认安装：
            ansible --version

5. Ansible 配置文件
    rpm -ql ansible | less 有很多，主要是各种管理的模块

    配置文件，配置文件一般都放在/etc/ansible下
        /etc/ansible/ansible.cfg  主配置文件,配置ansible工作特性(一般无需修改)
        /etc/ansible/hosts        主机清单(将被管理的主机放到此文件)
        /etc/ansible/roles/       存放角色的目录

    程序
        /usr/bin/ansible          主程序，临时命令执行工具
        /usr/bin/ansible-doc      查看配置文档，模块功能查看工具
        /usr/bin/ansible-galaxy   下载/上传优秀代码或Roles模块的官网平台
        /usr/bin/ansible-playbook 定制自动化任务，编排剧本工具
        /usr/bin/ansible-pull     远程执行命令的工具
        /usr/bin/ansible-vault    文件加密工具
        /usr/bin/ansible-console  基于Console界面与用户交互的执行工具

        这些都是通过Python来进行编写的
6. 主机清单的配置
    vim /etc/ansible/hosts
        1. ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，
           可以在inventory file中将其分组命名
        2. inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成

    添加方式：
    1. 直接添加：
        192.168.1.8
        192.168.1.7
        192.168.1.11
    2. 主机分组
        可以将同一个主机同时归并到多个不同的组中
        如果目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明
        [list1]
        192.168.1.8
        192.168.1.7
        [list2]
        192.168.1.8
        192.168.1.11
        [list3]
        192.168.1.[8:11]

        ansible list1 -m ping
        ansible list2 -m ping

    3. 写域名
        自己修改对应的DNS配置，域名对应的IP地址

    登录方式：
    1. 密码登录：
        ansible 192.168.1.8 -m ping -u root -k
        admin

        注意：ansible是默认关闭使用密码连接的，开启需要配置/etc/ansible/ansible.cfg
             中的host_key_checking=False
    2. 基于ssh-keygen登录：
        配置ssh免密登录： ssh-keygen  先看一下.ssh目录中有没有id_rsa文件
        生成秘钥和公钥在 /root/.ssh/id_rsa 文件夹下
        将公钥传递到服务器：ssh-copy-id -i ~/.ssh/id_rsa.pub root@192.168.1.8，7，11
        在客户机上可以观察到 ssh文件夹下的 authorized_keys

        SSH提速：
            vim /etc/ssh/sshd_config
            UseDNS no
            GSSAPIAuthentication no

7. Ansible主配置文件
    vim /etc/ansible/ansible.cfg
    [defaults]
    #inventory     = /etc/ansible/hosts      # 主机列表配置文件
    #library       = /usr/share/my_modules/  # 库文件存放目录

    #remote_tmp    = $HOME/.ansible/tmp      # 临时py命令文件存放在远程主机目录
    #local_tmp     = $HOME/.ansible/tmp      # 本机的临时命令执行目录
    可以在远程主机上看到，但是这个是临时的，将脚本放置在远程主机，运行完毕后返回结果，临时文件会被删除

    #forks         = 5                       # 默认并发数,同时可以执行5次
    #sudo_user     = root                    # 默认sudo 用户
    #ask_sudo_pass = True                    # 每次执行ansible命令是否询问ssh密码
    #ask_pass      = True                    # 每次执行ansible命令是否询问ssh口令
    #remote_port   = 22                      # 远程主机的端口号(默认22)

    建议优化项：
    host_key_checking = False               # 检查对应服务器的host_key，建议取消注释
    log_path=/var/log/ansible.log           # 日志文件,建议取消注释
    module_name   = command                 # 默认模块

8. ansible-doc  ansible命令帮助文档
    man ansible
    ansible-doc: 显示模块帮助
        ansible-doc [options] [module...]
            -a            显示所有模块的文档
            -l, --list    列出可用模块
            -s, --snippet 显示指定模块的playbook片段(简化版,便于查找语法)
        示例：
            ansible-doc -l      列出所有模块,3000多个
            ansible-doc ping    查看指定模块帮助用法
            ansible-doc -s ping 查看指定模块帮助用法

9. ansible指令  Ad-Hoc模式
    ansible <host-pattern> [-m module_name] [-a args]
        --version              显示版本
        -m module              指定模块，默认为command
        -v                     详细过程 –vv -vvv更详细
        --list-hosts           显示主机列表，可简写 --list
        -k, --ask-pass         提示输入ssh连接密码,默认Key验证
        -C, --check            检查，并不执行
        -T, --timeout=TIMEOUT  执行命令的超时时间,默认10s

        配置其他用户登录的方式，切换为sudo的方式：
        -u, --user=REMOTE_USER 执行远程执行的用户
        -b, --become           代替旧版的sudo切换
            --become-user=USERNAME 指定sudo的runas用户,默认为root
        -K, --ask-become-pass  提示输入sudo时的口令

10. ansible主机配置方式
    ansible的Host-pattern
    匹配主机的列表
        All ：表示所有Inventory中的所有主机
            ansible all –m ping
        * :通配符
            ansible "*" -m ping  (*表示所有主机)
            ansible 192.168.1.* -m ping
            ansible "li*" -m ping
        或关系 ":"
            ansible "websrvs:appsrvs" -m ping
            ansible “192.168.1.10:192.168.1.20” -m ping
        逻辑与 ":&"
            ansible "websrvs:&dbsrvs" –m ping
            在websrvs组并且在dbsrvs组中的主机
        逻辑非 ":!"
            ansible 'websrvs:!dbsrvs' –m ping
            在websrvs组，但不在dbsrvs组中的主机
            注意：此处为单引号
        综合逻辑
            ansible 'websrvs:dbsrvs:&appsrvs:!ftpsrvs' –m ping
        正则表达式
            ansible "websrvs:&dbsrvs" –m ping
            ansible "~(web|db).*\.magedu\.com" –m ping