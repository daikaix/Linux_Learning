1. ansible-galaxy  # 银河,下载对应的roles
    连接:
        https://galaxy.ansible.com -> search 查看信息
    下载：
        ansible-galaxy collection install nginxinc.nginx_core
        下载位置在： /root/.ansible/roles/nginxinc.nginx_core
        一般下载不了, 可以在网站上直接下载
    删除：
        remove
    roles文件目录：nginx, nginx_app_protect

2. ansible-pull
    推送命令至远程，效率无限提升，对运维要求较高

3. ansible-playbook  可以引用按照标准的yml语言写的脚本
    执行playbook
    示例：ansible-playbook hello.yml
        vim hello.yml
        #hello world yml file
        - hosts: list1
          remote_user: root
          tasks:
            - name: hello world
              command: /usr/bin/wall hello world

4. ansible-vault  (了解)
    功能：管理加密解密yml文件
        ansible-vault [create|decrypt|edit|encrypt|rekey|view]
        ansible-vault encrypt hello.yml 加密  -> 123456
        ansible-vault decrypt hello.yml 解密
        ansible-vault view hello.yml    查看  -> 只看，不解密
        ansible-vault edit hello.yml    编辑加密文件
        ansible-vault rekey hello.yml   修改口令
        ansible-vault create new.yml    创建新文件

5. Ansible-console：可交互执行命令，支持tab

    root@all (3)[f:5]$
    执行用户@当前操作的主机组 (当前组的主机数量)[f:并发数]$

    配置修改：
        设置并发数：forks n   例如： forks 10
        切换组：cd 主机组 例如： cd web
        列出当前组主机列表： list
        列出所有的内置命令： ?或help
    示例：
        root@all (2)[f:5]$ list
        root@all (2)[f:5]$ cd appsrvs
        root@appsrvs (2)[f:5]$ list
        root@appsrvs (2)[f:5]$ yum name=httpd state=present
        root@appsrvs (2)[f:5]$ service name=httpd state=started

6. yaml语法
    playbook是由一个或多个"play"组成的列表，是一个动作，要由多个动作组成角色role

    yaml语言编写playbook,语法格式
        1. 在单一档案中，可用连续三个连字号(——)区分多个档案。
           另外，还有选择性的连续三个点号( ... )用来表示档案结尾
        2. 次行开始正常写Playbook的内容，一般建议写明该Playbook的功能
        3. 使用#号注释代码
        4. 缩进必须是统一的，不能空格和tab混用
        5. 缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的
        6. YAML文件内容是区别大小写的，k/v的值均需大小写敏感
        7. 多个k/v可同行写也可换行写，同行使用:分隔
        8. v可是个字符串，也可是另一个列表[]
        9. 一个完整的代码块功能需最少元素需包括 name 和 task
        10.一个name只能包括一个task
        11.YAML文件扩展名通常为yml或yaml

7. PlayBook核心元素
    Hosts 执行的远程主机列表
    Tasks 任务集
    Variables 内置变量或者自定义变量，在playbooks中调用
    Templates 模板文件，可以替换模板文件中的一些变量实现简单逻辑的文件
    Handlers Notify  特定条件触发的操作
    tags 指定某条任务执行，可以跳过已经确定执行了的指令

    Hosts：
        playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。
        hosts用于指定要执行指定任务的主机，须事先定义在主机清单中

        形式：与ansible指令类似
            Websrvs:&dbsrvs
            192.168.1.*
        示例: - hosts: websrvs:dbsrvs

    remote_user:
        可用于Host和task中。
        也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；
        此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户
        - hosts: websrvs
          remote_user: root   (可省略,默认为root)  以root身份连接
          tasks:    指定任务
            - name: test connection
              ping:
              remote_user: magedu
              sudo: yes           默认sudo为root
              sudo_user:wang      sudo为wang

    gather_facts: no 表示在ansible运行时，不收集详细信息

    task列表和action
        多个任务,一个模块一个模块执行
        1. 主体部分是task list,即在所有主机上完成第一个任务后，再开始第二个任务

        2. task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。

        3. 每个task都应该有其name，用于playbook的执行结果输出。

        tasks：任务列表
        两种格式：
            (1) action: module arguments
            (2) module: arguments 建议使用  模块: 参数
            注意：shell和command模块后面跟命令，而非key=value

        某任务的状态在运行后为changed时，可通过"notify"通知给相应的handlers
        任务可以通过"tags"打标签，可在ansible-playbook命令上使用-t指定进行调用
        示例：
        - hosts: websrvs
          remote_user: root   (可省略,默认为root)  以root身份连接
          tasks:    指定任务
            - name: install httpd
              yum: name=httpd state=present
            - name: start httpd
              service: name=httpd state=start enable=yes

        如果命令或脚本的退出码不为零，可以使用如下方式替代
        tasks:
          - name: run this command and ignore the result
            shell: /usr/bin/somecommand || /bin/true
            转错为正  如果命令失败则执行 true

        或者使用ignore_errors来忽略错误信息
        tasks:
          - name: run this command and ignore the result
            shell: /usr/bin/somecommand
            ignore_errors: True  忽略错误

8. 运行PlayBook脚本
    将playbook保存为yml文件

    运行playbook的方式
        ansible-playbook <filename.yml> ... [options]

    常见选项
        --check -C       只检测可能会发生的改变，但不真正执行操作
                         (只检查语法,如果执行过程中出现问题,-C无法检测出来)
                         (执行playbook生成的文件不存在,后面的程序如果依赖这些文件,也会导致检测失败)
        --list-hosts     列出运行任务的主机
        --list-tags      列出tag  (列出标签)
        --list-tasks     列出task (列出任务)
        --limit 主机列表 只针对主机列表中的主机执行
        -v -vv -vvv      显示过程

    示例
        ansible-playbook hello.yml --check 只检测
        ansible-playbook hello.yml --list-hosts  显示运行任务的主机
        ansible-playbook hello.yml --limit websrvs  限制主机

    注意：
            firewalld 模块
            - firewalld:
                port: 80/tcp   ( 443/tcp )
                zone: public
                permanent: yes
                state: enabled

9. 结合handlers和notify实现PlayBook
    1. Handlers 实际上就是一个触发器,本质是task列表
       用于当关注的资源发生变化时，才会采取一定的操作
    2. Notify用于在每个play的最后被触发, 这样可避免多次有改变发生时每次都执行指定的操作
       仅在所有的变化发生完成后一次性地执行指定操作。

    例如：
        配置文件发生更改，需要重启httpd服务，想要在原本的安装PlayBook增量修改
        直接添加 notify: restart httpd

10. tags元素
    tags: 添加标签
    可以指定某一个任务添加一个标签,添加标签以后,想执行某个动作可以做出挑选来执行
    多个动作可以使用同一个标签

    直接在tasks之中添加tags，通过命令指定执行需要的标签
        ansible-playbook -t install,conf

11. PlayBook 变量
    变量命名:
        变量名仅能由字母、数字和下划线组成，且只能以字母开头

    变量定义：key=value
        示例：http_port=80

    变量调用方式：
        通过{{ variable_name }} 调用变量，且变量名前后必须有空格

    变量获取：
        1. ansible setup facts 远程主机的所有变量都可直接调用 (系统自带变量)
           This module is automatically called by playbooks to gather useful variables about remote
           hosts that can be used in playbooks
           setup模块可以实现系统中很多系统信息的显示
                    可以返回每个主机的系统信息包括:版本、主机名、cpu、内存
           ansible all -m setup -a 'filter="ansible_nodename"'     查询主机名
           ansible all -m setup -a 'filter="ansible_fqdn"'     查询主机名
           ansible all -m setup -a 'filter="ansible_memtotal_mb"'  查询主机内存大小
           ansible all -m setup -a 'filter="ansible_distribution_major_version"'  查询系统版本
           ansible all -m setup -a 'filter="ansible_processor_vcpus"' 查询主机cpu个数

        2. 通过命令行指定变量，优先级最高
           ansible-playbook –e varname=value
    实例1：
        必须在playbook中使用变量，因为模式使用了setup模块
        ansible-playbook var.yml
    实例2：
        在命令中指定变量
        ansible-playbook –e pkname=httpd var.yml
    实例3：
        在命令中指定多个变量
        ansible-playbook -e "username=user2 groupname=group2” var2.yml

        3. 使用变量文件 实例4
           vars_files
            - vars.yml

        4. 直接在playbook中使用 vars: 指定变量 实例5

        5. 在/etc/ansible/hosts(主机清单)中定义变量  实例6
           普通变量：主机组中主机单独定义，优先级高于公共变量(单个主机)
           公共(组)变量：针对主机组中所有主机定义统一变量(一组主机的同一类别)