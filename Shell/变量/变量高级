1. 变量替换 [ 测试不要求，可以使用if,else代替 ]
    ${ 变量#匹配规则 }   # 从头开始匹配，最短删除
    ${ 变量##匹配规则 }  # 从头开始匹配，最长删除

    ${ 变量%匹配规则 }   # 从尾开始匹配，最短删除
    ${ 变量%%匹配规则 }  # 从尾开始匹配，最长删除

    ${ 变量/old/new }   # 旧字符串变为新字符串，只替换第一个
    ${ 变量//old/new }  # 旧字符串变为新字符串，全部替换

2. 变量测试 [ 应用不多 ]
    var=${str-expr}
        当str没有声明的话，var取expr, str为空，var取空等等

3. 字符串处理
    计算字符串长度： ${#string}
                  expr length "$string"

    获取子串字符在字符串中的索引位置：
        expr index $string $substring
        注意：只是字符的位置，逐个字符的去找，直接返回最近的结果

    计算子串长度：
        expr match $string substr
        注意：子串必须从头开始匹配，从其他位置无法匹配
        所以，index和match使用较少

    抽取子串：
        ${string:position}          从position开始
        ${string:position:length}   从position开始,匹配长度为length
        ${string: -position}        从右边开始匹配
        ${string:(position)}        从右边开始匹配
        expr substr $position $length
        从position开始，匹配长度为length

        注意：expr 数目减一
             ${} 数目一致

4. 字符处理实例脚本
    变量string="BigData process framework is Hadoop,Hadoop is an open source project"
    执行脚本打印该变量，给出以下选项：
    1. 打印String长度
    2. 删除所有的Hadoop
    3. 替换第一个Hadoop为Mapreduce
    4. 替换所有的Hadoop为Mapreduce

    需求进行功能划分：
        function print_tips
        function len_of_string
        function del_hadoop
        function rep_hadoop_mapreduce_first
        function rep_hadoop_mapreduce_all

5. 命令替换
    `command`
    $(command)

    获取所有的用户并输出：cat /etc/passwd | cut -d ":" -f 1

    根据系统时间获取今年或者明年：data +%Y  +必须和%Y在一起

    根据系统获取今年还剩几个星期，过了几个星期：
        $(($(date +%j) / 7))  获取当前在365天中的时间

    根据系统获取是否有nginx进程，没有就拉起来：
        ps -ef | grep nginx | grep -v grep | wc -l

    注意：$(()) 用来进行运算，可以使用num++,num--操作

    6. 有类型变量
        为变量定义类型，使用declare和typeset命令，两者等价
        -r 只读  -i 整数
        -a 数组  -f 显示脚本前定义的所有函数及内容
        -F 显示此脚本前定义过的函数名
        -x 定义为环境变量

        取消：- 变为 + 即可

        数组：
            定义：array=("jones" "mike" "kobe" "jordan")
            输出：${array[@]}, ${array[0]}
            获取长度：${#array[@]}, ${#array[0]}

    7. 数学运算
        expr $num1 operator $num2
        $(( $num1 operator $ $num2 ))

        符号：基础，
             num1 | num2  判断num1不为空且非0，返回num1,否则返回num2
             num1 & num2  判断num1不为空且非0，返回num1,否则返回0

        注意：
            1. 实际使用时，需要加\进行转义, 例如> 就是重定向符号
            2. 正确返回1，否则返回0
            3. 进行重定向 > 2&>1  或者 &>
                正确执行返回0，错误执行返回2，对应输出通道标志符
            4. $? 执行上一个指令的返回值
            5. for循环， for((i=0;i<$num;i++)), for i in `seq 1 $num`


        实例： 输入num, 计算1+...+num, 判断整数
            获取输入
            判断整数  expr $num + 1 &> /dev/null  -> 0
            判断正数  `expr $num \> 0` -eq 1

8. 浮点运算
    bc: bash内建的计算器，支持浮点运算
        内建scale,默认为0

    操作: 基础，指数计算^
         scale=2 小数点为2

    脚本使用：echo "scale=4;23.3+35" | bc
