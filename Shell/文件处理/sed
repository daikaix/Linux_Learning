1. sed的工作模式
    本质是流编辑器
    语法格式：
        stdout | sed [option] "pattern command"
        sed [option] "pattern command" file

    option:
        -n: 只打印匹配的行, [ 一开始是打印出原行的信息，在打印处理后的信息，不加n打印两遍 ]
        -e: 多个匹配模式使用, [ 如果有多个匹配模式，必须使用-e ]
        -f: 指定命令对应的文件, [ 文件对应 pattern command ]
        -r: 支持扩展正则表达式
        -i: 直接修改文件内容 [ 否则是打印在命令行中 ]

2. pattern详解
    pattern:
        10cmd                       10
        10,20cmd                    10-20
        10,+5cmd                    10-15
        /pattern1/cmd               匹配
        /pattern1/,/pattern2/cmd    匹配1-匹配2 [ 如果匹配不到，就到最后 ]
        10,/pattern1/cmd            10-匹配1
        /pattern1/,10cmd            匹配1-10 [ 匹配1大于匹配2，只打印一行 ]

3. 编辑命令 cmd详解
    command:
    查询：
        p: 打印
    增加：
        a: 行后追加
        i: 行前追加
        r: 外部文件读入，行后追加
        w: 匹配行写入外部数据
    删除：
        d
    修改：
        s/old/new
        s/old/new/g
        s/old/new/2g  行内的从第二个开始替换，到剩下所有的
        s/old/new/ig  行内所有的都替换
    其他：
        =   显示行号

    反向引用
        &和\1 表示前面匹配到的整个串
        sed "s/\(1..e\)/\1r/g" 寻找以1开头以e结尾的字符串，后面加上r
        sed "s/1..e/&r/g"

    注意：
        匹配模式中如果存在变量，需要使用双引号，否则使用''将变量括起来

4. 查找文件特定内容
    一些实例：
        sed -n '20p' /etc/passwd
        sed -n '8,+5p' /etc/passwd
        sed -n '/\/bin\/bash/,5p' /etc/passwd

    脚本练习：
        处理一个类似MYSQL配置文件my.conf的文本，编写脚本统计每个段的名称以及参数对应的信息
        获取FILE_NAME:
            FILE_NAME=$1

        function get_all_segment
            获取[xx]: grep -E "^\[" $FILE_NAME
                     sed -n "/\[.*\]/p" $FILE_NAME

            提取xx: sed -n 's/\[\(.*\)\]/\1/g;p'
                   sed 's/\[\(.*\)\]/\1/g'
                   sed -e 's/\[//g' -e 's/\]//g'

            遍历： for seg in `get_all_segment`
                  do
                    echo "配置项:$seg"
                  done

        function count_items_in_segment
            获取两个属性之间的行：
                sed -n '/\['$1'\]/,/\[.*\]/p' $FILE_NAME
            排除空行，[行，#行
                grep -v "^#" | grep -v "^$" | grep -v "\[.*\]"
            统计行信息
                wc -l
                index=0
                for item in $items
                do
                    index=`expr $index + 1`
                done
                echo $index

        显示数据：
            number=0
            number=`expr $number + 1`
            count=`count_items_in_segment $seg`

5. 利用sed删除特定内容
    以yarn开头的行到最后一行：
        sed -i '/^yarn/,$d' passwd
    删除空行, 注释行    空格 => [:blank:] 表示空格
        sed -i '/^#/d;/^$/d' nginx.conf
    删除#,但不是开头的
        sed -i '/[:blank:]*#/d;/^$/d' nginx.conf
    不以#开头的行，都加上*
        sed -i 's/^[^#]/\*&/g' nginx.conf

6. 利用sed修改文件内容
    只修改第一行的第一个root为ROOT
        sed -i '1s/root/ROOT/' passwd
    修改第五行到第十行的root为ROOT
        sed -i '5，10s/root/ROOT/g' passwd
    将匹配到的行进行替换操作
        sed -i '/\/bin\/bash/s/bin/BIN/g' passwd
    删除数字
        sed -i 's/[0-9]*//g' file.txt

7. 利用sed追加内容
    sed -i '10a Add Line Behind' passwd
    匹配行后添加
    sed -i '/\/bin\/bash/a Add Line Behind' passwd
    匹配行前添加
    sed -i '/\/bin\/bash/i Add Line Behind' passwd

    sed -i '/^yarn/r /etc/passwd' passwd
