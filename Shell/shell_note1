Shell 基础
    shell是外壳，是一种批处理的脚本，shell的不同对应不同的终端命令行环境
    种类：Bash,Ksh,Csh,Zsh
    更换shell: chsh -> /bin/bash , /bin/zsh

    Shell脚本
        格式:
            vim test.sh, 开头需要#！/bin/bash, 是SheBang，脚本会被指定的脚本执行
            ls,cd基础命令可以执行
            #为注释
            添加权限chmod 755 test.sh，./test.sh 运行脚本
        变量:
            message='Hello World' 变量赋值，=左右不能有空格
            echo "The message is $message" 获取变量值，$xx, echo显示数据
                echo -e 显示换行符，加入\n
                ''忽略所有特殊字符，只有""才能不忽略$，`符号

            message=`pwd`, pwd被执行了，作为命令

            read name 读取变量，输入被存储在变量中
                同时为多个变量赋值 read name1 name2
                显示字符： read -p 'Please input your name:' name
                限制输入字符数：read -n 5 name  达到5个之后立即显示
                限制输入时间：read -t 5 name 达到5s后自动提交
                输入密码：read -s password

            数学运算
                let "a=5", let "b=a+a" echo "c=$c"  使用let命令进行计算
                符号：+，**，*

            环境变量
                全局变量，被任何Shell程序获取，env获取环境变量
                $SHELL，PWD当前目录，
                PATH: 一系列路径的集合，存在于PATH的路径的可执行程序可以直接执行
                .bashrc -> export EDITOR=nano
            参数变量
                ./variable.sh 参数1 参数2 参数3
                $# 参数数目 $0 运行脚本名称 $1 第一个参数 $2 第二个参数
                    echo "You have executed $0, there are $# parameters"
                    echo "The firt Parameter is $1"
                shift 使得参数指针向下移动一位
            数组
                array=('value0','value1','value2')
                array[5]='value5'
                echo ${array[*]}
                ${array[2]} 访问需要加上{}

        条件语句
            if语句：
                if [ xx ]
                then ,
                elif ,
                else
                fi
            []两边必须空一格，$xx = $xx
            多个条件，[] && [] || []
            否定 [ ! -e $file ]
                相等判断： $1 = $2, $1!= $2,
                是否为空： -z $1，不为空 -n $1
                大小判断：-eq,-ne, -lt lower than, -le lower or equal,
                        -gt larger than, -ge
                类型判断： -e $file 是否存在，-d,-f,-L 目录，文件，链接，
                权限判断：-r,w,x 可读可写可执行
                时间判断：-nt newer than,-ot older than 更新的文件，更旧的文件

            case语句：
                case $1 in
                    "Mattew")
                        echo "xxx!" ;;
                    "dog" | "cat")
                        echo "xx";;
                    *)
                        echo "XXX" ;;
                esac

            或匹配，需要使用|



        循环语句
            while循环：
                while [ -z $response ] || []
                do
                    xxx
                done
            until循环：
                until [ ]
                do
                    xxx
                done
            for循环：
                for animal in 'xx' 'xx' 'xx'
                do
                    xxx
                done

            将命令结果作为循环条件，for file in $listfile, listfile=`ls`
            生成编号 for i in `seq 1 2 10`

        函数
            print_something(){
                echo xx， 传递参数 echo Hello $1
                return 1 返回值
            }
            print_something Luke
            echo $?

            获取输入的行数：
                cat $1 , wc -l, line_num=$(lines_in_file $1)

            本地变量：默认为global，local定义本地变量，防止被改变数值
            重载命令, ls() { command ls -lh }

    以调试模式运行： bash -x test.sh, 会显示出执行的命令
    直接执行：将bash放置在/usr/bin之中，就可以直接运行