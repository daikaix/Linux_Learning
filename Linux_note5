==1. Java Web世界
    Servlet: 动态生成HTML代码 -> SpringMVC
    Tomcat: Java的服务程序
    Jenkins: 持续集成工具，Servlet提供的一个Java应用程序

    Tomcat与Apache的区别：
    Apache是web服务器（静态解析，如HTML），tomcat是java应用服务器（动态解析，如JSP）
    Apache是一款Web服务器软件，有多种产品，可以支持SSL技术，支持多个虚拟主机。
    Tomcat只是一个servlet(jsp也翻译成servlet)容器，可以认为是apache的扩展，但是可以独立于apache运行
    1）Apache是普通服务器，本身只支持html即普通网页，可以通过插件支持php，还可以与Tomcat连通
      (Apache单向连接Tomcat，就是说通过Apache可以访问Tomcat资源，反之不然)
    2）Apache只支持静态网页，但像Jsp动态网页就需要Tomcat来处理。
    3）Apache和Tomcat整合使用，如果客户端请求的是静态页面，则只需要Apache服务器响应请求；
    4）Apache和Tomcat是独立的，在同一台服务器上可以集成。

==2. 配置Java环境并安装Tomcat
    安装：
        yum search java | grep openjdk  => java 1.8.0
        查看需要安装的Java版本,devel版本
        yum install tomcat => systemctl start tomcat, enable
        开放防火墙 firewall-cmd --zone=public --add-port=8080/tcp --permanent

    配置文件查看： rpm -ql tomcat
        ls -dl /usr/share/tomcat/webapps -> /var/lib/tomcat/webapps
        服务器配置：/etc/tomcat/server.xml
        主配置：/etc/tomcat/tomcat.conf

    插件安装：
        tomcat-webapps
        tomcat-admin-webapps
        tomcat-docs-webapp
        tomcat-javadoc

    创建Tomcat用户：
        /etc/tomcat/tomcat-users.xml
        增加一个admin用户即可，123456， roles
        Manager APP:可以查看到所有的webapps目录下的项目
        Host Manager: 可以配置虚拟主机

    Tomcat的Coyote Web服务器：只支持HTTP，处理静态文件效率低，
        解决方案：使用Nginx或者Apache

==3. 安装Jenkins
    war包：web archieve
    下载war包：wget https://mirrors.jenkins.io/war-stable/latest/jenkins.war
            scp jenkins.war root@192.168.1.9:/root

    war包放置到webapps文件夹中,并且添加安全上下文
            mv jenkins.war /var/lib/tomcat/webapps
            安全上下文：tomcat_var_lib_t -> restorecon -Rv .
            还是不行： setenforce 0

    登录配置：
        密码位置：/usr/share/tomcat/.jenkins/secrets/initialAdminPassword
        自己设置文件夹：
            mkdir /var/lib/jenkins
            chown tomcat:tomcat /var/lib/jenkins
            vim /etc/tomcat/context.xml: 配置环境变量
            vim /etc/tomcat/context.xml
            <Environment name="JENKINS_HOME" value="/var/lib/jenkins" type="java.lang.String"/>

    运行：
        直接运行：java -jar jenkins.war
        端口运行：java -jar jenkins.war --httpPort=8081
        在Tomcat容器中运行

    插件安装：
        http访问：vim /usr/share/tomcat/.jenkins/hudson.model.UpdateCenter.xml
        Install Suggested-Plugins
        插件位置：jenkins/WEB-INF/detached-plugins
    创建第一个admin用户：
        使用Jenkins

==4. Nginx安装
    代理：Proxy, 反向代理，正向代理,负载均衡
    安装：
        yum install epel-release  EPEL源，额外的软件包
        yum install nginx
    启动：
        systemctl start nginx ( 首先需要关闭 apache,httpd )
        systemctl enable nginx

    配置文件：rpm -ql nginx
        主配置文件：/etc/nginx/nginx.conf
        首页信息：/usr/share/nginx/html/index.html

    配置nginx:
    1. 先配置Apache监听其他端口
        http 80 https 443 apache[ http 7080 https 7443 ]
        先配置apache 监听其他端口 vim /etc/httpd/conf/httpd.conf
                              vim /etc/httpd/conf.d/ssl.conf
            SELinux添加端口： semanage port -a -t http_port_t -p tcp 7080
            firewall添加端口： firewall-cmd --zone=public --add-port=7080/tcp --permanent
    2. 反向代理
        vim /etc/nginx/nginx.conf
        nginx.conf:
            work_processes: 进程数
            events: 每个进程的最大连接数，worker_connections
            error_log: 错误日志
            include: 包含的其他配置文件
            http
                logformat 日志格式main $remote_addr$remote_user

                添加区块：
                    upstream backend_jenkins {
                        server 127.0.0.1:8080;
                    }

                    upstream backend_apache {
                        server 127.0.0.1:7080;
                    }

                server: 设置虚拟主机
                    listen 监听端口
                    server_name 域名 www.linuxcoreapp.com linuxcoreapp.com
                    root 对应默认静态文件查找位置，可以放在Tomcat对应的文件位置
                    location 位置
                        location / {
                            proxy_pass http://backend_apache;
                            #proxy_pass 代理转接
                            #
                        }
                        location = /jenkins {
                                proxy_pass http://backend_jenkins;
                        }

                        // 增加配置静态文件请求地址，否则nginx自动访问/usr/share/nginx/html/
                        location ~ .* {
                            proxy_pass     http://backend_jenkins;
                            proxy_set_header Host $http_host;
                            proxy_set_header X-Real-IP $remote_addr;
                            proxy_set_header X-Fonwarded-For $proxy_add_x_forwarded_for;
                        }
                    error_page

        修改：/etc/hosts -> 对应数据为192.168.1.9 www.linuxcoreapp.com

        支持HTTPS：
            将server注释去除
            将ssl的公钥和证书存放在指定目录下
            ssl_certificate "/etc/pki/nginx/server.crt";
            ssl_certificate_key "/etc/pki/nginx/private/server.key";
            /etc/pki/tls/private/server.key
            /etc/pki/tls/certs/server.crt

            server中：
            # redirect HTTP requests to HTTPS
            return 301 https://$host$request_uri;

==5. 安装Squid作为代理缓存服务器
    proxy-cache: 代理缓存，如果数据已经缓存，直接返回
    优点：
        授权或禁止访问某些资源，防止访问电影网站，招聘网站等
        提高带宽
    Squid:
        默认监听3128端口，yum install squid
        防火墙添加3128端口

        对server服务器配置静态ip,桥接模式，不能上外网
        在浏览器上设置上添加proxy,HTTP Proxy 192.168.1.9即可

    访问控制配置：
        主配置文件：/etc/squid/squid.conf (rpm -ql squid)
        配置命令查看： grep -vE "^#|^$" /etc/squid/squid.conf

        http_port: 指定squid监听的地址和端口，可以配置多个
        coredump_dir: 其中写入core错误文件的目录
        refresh_pattern: 判断文件新旧的指令
        acl: Access Control Lists 访问控制列表
            localnet，SSL_ports，Safe_ports
            port

        http_access: 根据acl允许或者禁止某些连接
            allow,deny
        配置实例：
            acl client src 192.168.1.9
            http_access allow client
            http_access deny all

            url中有imooc,则进行拦截
            acl deny_keyword url_regex -i imooc
            http_access deny

            禁止下载游戏文件
            acl deny_file urlpath_regex -i \.rar$ \.avi$ \.zip$
            http_access deny deny_file


==6. Docker
    dock码头，docker码头工人，Docker是容器引擎
    容器类似于集装箱，Docker可以拉取这些集装箱

    容器与虚拟机进行对比：
    虚拟机：
        基础设施(Infrastructure)。
            它可以是你的个人电脑，数据中心的服务器，或者是云主机。
        虚拟机管理系统(Hypervisor)。
            利用Hypervisor，可以在主操作系统之上运行多个不同的从操作系统。
            类型1的Hypervisor有支持MacOS的HyperKit，支持Windows的Hyper-V、Xen以及KVM。
            类型2的Hypervisor有VirtualBox和VMWare workstation。
        客户机操作系统(Guest Operating System)。
            假设你需要运行3个相互隔离的应用，则需要使用Hypervisor启动3个客户机操作系统，也就是3个虚拟机。
            这些虚拟机都非常大，也许有700MB，这就意味着它们将占用2.1GB的磁盘空间。
            更糟糕的是，它们还会消耗很多CPU和内存。各种依赖。

    容器：
        基础设施(Infrastructure)。
        主操作系统(Host Operating System)。
            所有主流的Linux发行版都可以运行Docker。
            对于MacOS和Windows，也有一些办法”运行”Docker。
        Docker守护进程(Docker Daemon)。
            Docker守护进程取代了Hypervisor，它是运行在操作系统之上的后台进程，负责管理Docker容器。
        各种依赖
            对于Docker，应用的所有依赖都打包在Docker镜像中，Docker容器是基于Docker镜像创建的。
        应用
            应用的源代码与它的依赖都打包在Docker镜像中，不同的应用需要不同的Docker镜像。
            不同的应用运行在不同的Docker容器中，它们是相互隔离的。

    安装：[https://docs.docker.com/engine/install/centos/]
        配置aliyun的docker源：
        sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
        安装docker
        sudo yum install docker-ce docker-ce-cli containerd.io
        运行验证：
        systemctl start docket
        docker run hello-world 由于本地没有镜像，需要从镜像仓库中拉取

    使用实例：
        docker run -it centos bash
        docker pull nginx,tomcat,...
        docker run -it centos /bin/echo "Hello Docker"
        docker images
        docker ps --help

==7. 安装MySQL5.7
    LAMP:Linux+Apache+MySQL(MariaDB)+PHP

    CentOS7 安装MySQL 5.7 版本：
        1. 添加Mysql5.7仓库 [ CentOS 7的默认yum仓库中并没有MySQL5.7 ]
            sudo rpm -ivh https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm
        注意：rpm 补充，找到rpm安装包的网址后，直接使用rpm -ivh 即可安装
             rpm -ql 是查看rpm安装包安装的一些详细信息，文档位置

        2. yum安装MySQL
           yum -y install mysql-community-server
           systemctl start mysqld
           systemctl enable mysqld
           systemctl status mysqld

        3. 获取临时密码,并修改密码
            vim /var/log/mysqld.log  -> temporary password
            alter user 'root'@'localhost' identified by '0k9R8kKAq*Le';
            set global validate_password_policy=0;
            set global validate_password_length=1;
            alter user 'root'@'localhost' identified by 'admin';

    mariadb:
        yum list all | grep mariadb
        yum -y install mariadb mariadb-libs mariadb-server
        systemctl start mariadb

    基础操作：
        /var/lib/mysql/ -> 一些生成的表
        select version();
        show databases; 查看数据库表
        drop database school;

        create table info(ID int not null);

        该用户可以在任意位置访问：
        grant all on school.* to dbuser@'%' identified by '123456'
        grant all on myshop.* to dbuser@'localhost' identified by '123456'
        grant all on school.* to dbuser@'192.168.1.9' identified by '123456'

        use mysql;
        showtables;
        desc user;
        select User,Host,Password from user;

        mysql -u dbuser -p -h localhost -> 123456

    导入数据库文件：
        mysql –uroot –padmin –D数据库<【sql脚本文件路径全名】
        mysql -uroot -padmin -Dmyshop < myshop.sql

        或者进入MySQL控制台：
        Mysql>source 【sql脚本文件的路径全名】 或 Mysql>\. 【sql脚本文件的路径全名】

==8. CentOS救援模式
    SELinux出现错误，
        无法正常启动，可以进入救援模式

        在开机过程中，按e键，进入内核编辑界面
        在ro 改为rw  init=/sysroot/bin/sh
        Ctrl+x 来启动

        chroot /sysroot 作为根目录
        vim /etc/selinux/config
        SELinux=permissive

    修改root密码：
        passwd root -> 至少8位的新密码
        exit
        reboot

==9. 内存，磁盘信息
    w,占cpu的容量
    top 进程，还有Cpu使用比率，内存信息,交换分区等
    du -s 显示文件大小

    df 表示文件系统，总大小，使用率，挂载点
        df -h 显示文件系统的磁盘使用情况

    free 显示内存和交换分区的使用量，与top显示的是一致的
        free -k,-m,-g 以KB,MB,GB显示

    fdisk: 显示磁盘的分区信息


==10. 磁盘分区
    disk partition: 磁盘分区，虚拟概念
    HDD: 机械硬盘，盘片转动，指定位置进行读写操作
    SDD: 固态硬盘，NAND闪存制成

    文件系统：每个分区，文件按照一定方法存储和组织起来，称为文件系统
        用户存储无需关心存储的物理位置
        实现了数据的存储和分级组织，每个分区只有一种文件系统

        种类：
        Windows:
            FAT16,FAT32  管理1T,2T
            NTFS: new Technology File System ,管理 16 Eo
        Linux:
            ext2: Extended2
            ext3,ext4
            xfs: 快速恢复可能被破坏的文件

    ls -l /dev/sd?
    ls -l /dev/sd??
    硬盘和磁盘分区的命名规则
        h,s: IDE接口，SATA接口
        d: drive,磁盘驱动器
        abcd: 顺序
        实例：sda1,sdb1,sdb2,sdx 表示移动硬盘或者u盘

    主分区：
        GPT划分128个主分区，默认是只有四个分区
    扩展分区
    逻辑分区：硬盘上连续的区域，编号5开始
    swap分区：将磁盘空间虚拟为内存来使用
    /boot分区：引导分区
    根分区：/，相当于C盘

    fdisk -l
    parted -l 显示磁盘分区的信息

    Number  Start   End     Size    Type     File system  标志
     1      1049kB  1075MB  1074MB  primary  xfs          启动
     2      1075MB  8590MB  7515MB  primary               lvm

    gparted

==11. 字符设备和块设备
    字符设备： ls -l 以c开头的表示字符设备 例如：/dev/tty, /dev/null 黑洞文件, /dev/zero
    块设备：支持随机访问，可以在设备的任意位置读取一定长度的数据
          文件属性表示是b,是block的首字母，比如硬盘等 /dev/sda1, /dev/sda2

    dd命令：
        用指定大小的块拷贝文件，

        dd if=/dev/sda of=backup
        if=指定拷贝的文件，of指定拷贝的位置
        dd if=/dev/zero bs=5M count=10 of=aFile
        拷贝10块，每块5M
        dd if=/dev/zero bs=5M count=10 seek=20 of=bFile
        创建空洞文件，跳过20个块的大小，再写入10个5M大小的块

    ls 与 du 的区别：
        ls是文件逻辑大小
        du是文件在磁盘中所占的空间大小

==12. 挂载硬件设备mount和umount
    新的硬盘存储设备： 先分区再格式化系统，最后挂载使用
    格式化：清除磁盘，并设置文件系统，NTFS,ext4

    挂载：使用硬盘设备或者分区数据时，需要将其与已经存在的目录文件关联
        mount /dev/sda1 /backup
            -t 指定文件系统类型
            -a 挂载所有在/etc/fstab的文件系统
        临时挂载，永久挂载需要写入/etc/fstab

        umount 撤销已经挂载的设备文件

==13. 添加硬盘设备和交换分区 fdisk mkfs
    虚拟机软件进行模拟：
        存储，控制器，硬盘添加，新建一个即可
    启动虚拟机：
        ls -l /dev/sd? 出现了两个硬盘
        ls -l /dev/sd?? 只有sda,sdb还没有挂载

    fdisk:
        集添加，删除，转换，分区等功能于一身

        fdisk /dev/sdb 进入command模式：
            m 查看可用参数
            n 添加新的分区
            d 删除某个分区信息
            l 列出所有可用的分区信息
            t 改变某个分区的类型
            p 查看分区信息
            w 保存并退出
            q 不保存直接退出

        p 发现没有分区
        n -> 分区类型：p,primary分区 分区号默认为1
             起始第一个扇区开始的位置
             最后一个扇区的位置，+2G 即为创建一个2G的分区
        w
    格式化文件系统：
        mkfs: 用于格式化，指定文件系统
        mkfs.xfs /dev/sdb1
    挂载该硬盘：
        mkdir /newFS
        mount /dev/sdb1 /newFS/

    新添加一个分区作为交换分区：
        fdisk /dev/sdb
        n -> p,2,  +3G
        p,w
        partprobe
        设置为交换分区,并启用：
        mkswap /dev/sdb2  -> free -m 还没有进入到Swap分区中
        swapon /dev/sdb2

    设置重启依然生效：
        vim /etc/fstab
        添加： /dev/sdb1 /newFS xfs defaults 0 0
        添加： /dev/sdb2 swap swap defaults 0 0


